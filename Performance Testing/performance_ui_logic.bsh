/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);");
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;");
}

makeLocalID();
onEvent("control", "show", "setIDNull()");
onEvent("control/Excavation_Data", "show", "refreshTrenchList()");
onEvent("control/Excavation_Data/newTrench", "click","newTrench()");
onEvent("control/Excavation_Data/TrenchList", "click", "loadTrench()");

onEvent("control/Units", "show", "refreshUnitList()");
onEvent("control/Units/UnitList", "click", "loadUnit()");

refreshTrenchList(){
    populateList("control/Excavation_Data/TrenchList", 
        fetchAll("SELECT uuid, group_concat(coalesce(freetext, ''),' - ') as response " +
        "FROM (select * from latestNonDeletedArchentIdentifiers order by case attributename when 'Job Name' then 1 when 'Trench ID' then 2 end ) " +
        "WHERE aenttypename = 'Trench' " +
        "GROUP BY uuid " +
        "order by response;"));
}

refreshUnitList(){
    populateList("control/Units/UnitList",
        fetchAll("select childuuid, trench.response || ' - ' || unit.response " +
        "from (select uuid, response from identifierasspreadsheet join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) where aenttypename = 'Trench') trench join latestnondeletedaentreln parent using (uuid) join latestnondeletedaentreln child using (relationshipid) join  " +
        "(select uuid as childuuid, response from identifierasspreadsheet join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) where aenttypename = 'Unit') unit on (child.uuid = childuuid); "));
}


setIDNull() {
    trench_id = null;
    unit_id = null;
}

/*** ARCHENT: Trench ***/

onEvent("Trench/PhotoLog", "show", "loadRelatedPhotologs()");
onEvent("Trench/PhotoLog/newPhotoLog", "delayclick", "saveTrench(\"newPhotolog();\")");
onEvent("Trench/PhotoLog/ListPhotoLog", "click", "loadPhotolog();");

onEvent("Trench/Notes", "show", "loadRelatedNotes()");
onEvent("Trench/Notes/newNote", "delayclick", "saveTrench(\"newNote();\")");
onEvent("Trench/Notes/ListNotes", "click", "loadNote();");

onEvent("Trench", "show", "showSlopeTab(true)");

onEvent("Trench/Trench_Info/Update", "delayclick", "saveTrench(\"\")");
onEvent("Trench/Trench_Info/Update_And_New", "delayclick", "saveTrench(\"newTrench()\")");
onEvent("Trench/Slope/Update", "delayclick", "saveTrench(\"\")");

onEvent("Trench/Trench_Info/Delete", "delayclick", "deleteTrench()");
onEvent("Trench/Slope/Delete", "delayclick", "deleteTrench()");

onEvent("Trench/Trench_Info/Take_GPS", "click", "fillInGPS(\"Trench/Trench_Info/\")");
onEvent("Trench/Trench_Info/Fill_Slope_Details", "click", "showSlopeTab(false)");

onEvent("Trench/Trench_Info/Take_Photo", "click", "attachPictureTo(\"Trench/Trench_Info/Photos\")");
onEvent("Trench/Trench_Info/Attach_Sketches", "click", "attachFileTo(\"Trench/Trench_Info/Sketches\")");
onEvent("Trench/Trench_Info/View_Attached", "click", "viewArchEntAttachedFiles(trench_id)");

onEvent("Trench/Units", "show", "refreshRelatedUnits()");
onEvent("Trench/Units/New_Unit", "delayclick", "saveTrench(\"newUnit()\")");
onEvent("Trench/Units/Unit_List", "click", "loadUnit()");

onEvent("Trench/Spits", "show", "refreshRelatedSpits()");
onEvent("Trench/Spits/New_Spit", "delayclick", "saveTrench(\"newSpit()\")");
onEvent("Trench/Spits/Spit_List", "click", "loadSpit()");

String trench_id = null;

newTrench() {
    if(isNull(getFieldValue("control/Excavation_Data/Job_Name"))) {
        showWarning("Validation Error", "You must fill in the Job Name before you can create a Trench");
        return;
    }
    trench_id = null;
    newTabGroup("Trench");
    setFieldValue("Trench/Trench_Info/Job_Name", getFieldValue("control/Excavation_Data/Job_Name"));
    setFieldValue("Trench/Trench_Info/Author", username);
}

loadTrench() {
    trench_id = getListItemValue();
    loadTrenchFrom(trench_id);
}

loadTrenchFrom(archentid) {
    trench_id = archentid;
    if (isNull(trench_id)) {
        showToast("No Trench selected");
        return;
    }
    showTabGroup("Trench", trench_id);
    Object max_unit_id = fetchOne("select max(cast(freetext as integer))+1 from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Unit ID' and uuid in ( " + 
    "select child.uuid from latestnondeletedaentreln parent join latestnondeletedaentreln child using (relationshipid) " +
    "where parent.uuid != child.uuid " +
    "and parent.uuid = " + trench_id + ");").get(0);
    if(!isNull(max_unit_id)) {
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Unit', "+ max_unit_id +");");
    } else {
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Unit', 1);");
    }
    Object max_spit_id = fetchOne("select max(cast(freetext as integer))+1 from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Spit ID' and uuid in ( " + 
    "select child.uuid from latestnondeletedaentreln parent join latestnondeletedaentreln child using (relationshipid) " +
    "where parent.uuid != child.uuid " +
    "and parent.uuid = " + trench_id + ");").get(0);
    if(!isNull(max_spit_id)) {
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Spit', "+ max_spit_id +");");
    } else {
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Spit', 1);");
    }
}

saveTrench(String callback) {
    if (isNull(getFieldValue("Trench/Trench_Info/Trench_ID"))) {
        showWarning("Validation Error", "Cannot save Trench without Trench ID");
        return;
    }
    
    if (!isNull(trench_id)) {
        entity = fetchArchEnt(trench_id);
    } else {
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Unit', 1);");
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Spit', 1);");
    }
    saveTabGroup("Trench", trench_id, null, null, "trench_id = getLastSavedRecordId();" + callback);
}

deleteTrench() {
    if (!isNull(trench_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Trench!", "reallyDeleteTrench()", "doNotDelete()");
    } else {
        cancelTabGroup("Trench", true);
    }
}

reallyDeleteTrench() {
    deleteArchEnt(trench_id);
    cancelTabGroup("Trench", false);
}

loadTrenchAttributes() {
    populateDropDown("Trench/Trench_Info/Dimensions", makeVocab("Dimensions"));
    populateRadioGroup("Trench/Trench_Info/Artefacts_Present", makeVocab("Artefacts Present"));
    populateCheckBoxGroup("Trench/Trench_Info/Landform_Genesis", makeVocab("Landform Genesis"));
    populateCheckBoxGroup("Trench/Trench_Info/Landform_Element", makeVocab("Landform Element"));
    populateDropDown("Trench/Trench_Info/Geomorphic_Context", makeVocab("Geomorphic Context"));
    populateCheckBoxGroup("Trench/Trench_Info/Samples_Collected", makeVocab("Samples Collected"));
    populateDropDown("Trench/Slope/Slope_Detail", makeVocab("Slope Detail"));
    populateDropDown("Trench/Slope/Slope_Detail_2", makeVocab("Slope Detail 2"));
}

showSlopeTab(Boolean onLoad) {
    for(vocabid : getFieldValue("Trench/Trench_Info/Landform_Element")) {
        if(getVocabName(vocabid.getName()).equals("{bSlope}")) {
            showTab("Trench/Slope");
            return;
        }
    }
    if(!onLoad) {
        showToast("Slope was not selected in Landform Element");
    } else {
        showTab("Trench/Slope");
        cancelTab("Trench/Slope", false);
    }
    return;
}

refreshRelatedUnits() {
    ArrayList units = new ArrayList();
    if(!isNull(trench_id)) {
         units = fetchAll("select uuid, aenttypename || ' ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Unit'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                    where uuid = "+trench_id+"\n"+
            "                                                       and relntypeName = 'TrenchUnit')\n"+
            "                             and uuid != "+trench_id+")\n"+
            "        ORDER BY uuid, attributename DESC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Trench/Units/Unit_List", units);
}

refreshRelatedSpits() {
    ArrayList spits = new ArrayList();
    if(!isNull(trench_id)) {
         spits = fetchAll("select uuid, aenttypename || ' ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Spit'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                    where uuid = "+trench_id+"\n"+
            "                                                       and relntypeName = 'TrenchSpit')\n"+
            "                             and uuid != "+trench_id+")\n"+
            "        ORDER BY uuid, attributename DESC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Trench/Spits/Spit_List", spits);
}

loadRelatedPhotologs() {
    Object photologs = new ArrayList();
    if (!isNull(trench_id)){
        photologs = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Photograph log'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+trench_id+"\n"+
            "                                                       and relntypeName = 'TrenchPhotographLog')\n"+
            "                             and uuid != "+trench_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Trench/PhotoLog/ListPhotoLog",  photologs);
}

loadRelatedNotes() {
    Object notes = new ArrayList();
    if (!isNull(trench_id)){
        notes = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Notes'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+trench_id+"\n"+
            "                                                       and relntypeName = 'TrenchNote')\n"+
            "                             and uuid != "+trench_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList("Trench/Notes/ListNotes", notes);
}

/*** ARCHENT: Unit ***/
onEvent("Unit", "show", "showGrassRootsTab(true)");

onEvent("Unit/Soil/Update_And_New", "delayclick", "saveUnit(\"newUnit()\")");
onEvent("Unit/Add/Update_And_New", "delayclick", "saveUnit(\"newUnit()\")");

onEvent("Unit/Soil/Update_And_Close", "delayclick", "saveUnit(\"cancelTabGroup(\\\"Unit\\\",false);showTab(\\\"Trench/Units\\\");\")");
onEvent("Unit/Add/Update_And_Close", "delayclick", "saveUnit(\"cancelTabGroup(\\\"Unit\\\",false);showTab(\\\"Trench/Units\\\");\")");

onEvent("Unit/Soil/Delete", "delayclick", "deleteUnit()");
onEvent("Unit/Add/Delete", "delayclick", "deleteUnit()");

onEvent("Unit/Soil/Fill_Grass_Roots_Details", "click", "showGrassRootsTab(false)");
onEvent("Unit/Grass_Roots/Back", "delayclick", "saveUnit(\"showTab(\\\"Unit/Soil\\\");\")");

onEvent("Unit/Add/Take_Photo", "click", "attachPictureTo(\"Unit/Add/Photos\")");
onEvent("Unit/Add/Attach_Sketches", "click", "attachFileTo(\"Unit/Add/Sketches\")");
onEvent("Unit/Add/View_Attached", "click", "viewArchEntAttachedFiles(unit_id)");

String unit_id = null;

newUnit() {
    unit_id = null;
    newTabGroup("Unit");
    autoNumUnit();
    setFieldValue("Unit/Soil/Job_Name", getFieldValue("Trench/Trench_Info/Job_Name"));
    setFieldValue("Unit/Soil/Trench_ID", getFieldValue("Trench/Trench_Info/Trench_ID"));
    setFieldValue("Unit/Soil/Author", username);
}

loadUnit() {
    unit_id = getListItemValue();
    loadUnitFrom(unit_id);
}

loadUnitFrom(archentid) {
    unit_id = archentid;
    if (isNull(unit_id)) {
        showToast("No Unit selected");
        return;
    }
    showTabGroup("Unit", unit_id);
}

saveUnit(String callback) {
    if (isNull(getFieldValue("Unit/Soil/Unit_ID")) || isNull(getFieldValue("Unit/Soil/Horizon"))) {
        showWarning("Validation Error", "Cannot save Unit without Unit ID or Horizon");
        return;
    }
    
    if (!isNull(unit_id)) {
        entity = fetchArchEnt(unit_id);
    } else {
        next_unit_id = fetchOne("select value from localSettings where key = 'Unit';").get(0);
        if(Integer.parseInt(getFieldValue("Unit/Soil/Unit_ID")) >= Integer.parseInt(next_unit_id)) {
            fetchOne("REPLACE INTO localSettings(key, value) VALUES('Unit', "+ getFieldValue("Unit/Soil/Unit_ID") +"+1);");
        } else {
            fetchOne("REPLACE INTO localSettings(key, value) VALUES('Unit', "+ next_unit_id +");");    
        }
    }
    saveTabGroup("Unit", unit_id, null, null, "unit_id = getLastSavedRecordId(); saveEntitiesToRel(\"TrenchUnit\", trench_id, unit_id);" + callback);
}

deleteUnit() {
    if (!isNull(unit_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Unit!", "reallyDeleteUnit()", "doNotDelete()");
    } else {
        cancelTabGroup("Unit", false);
        if(!isNull(trench_id)) {
            showTab("Trench/Units");
        }
    }
}

reallyDeleteUnit() {
    deleteArchEnt(unit_id);
    cancelTabGroup("Unit", false);
    if(!isNull(trench_id)) {
        showTab("Trench/Units");
    }
}

loadUnitAttributes() {
    populateHierarchicalDropDown("Unit/Soil/Texture", "Texture");
    populateDropDown("Unit/Soil/Moisture", makeVocab("Moisture"));
    populateDropDown("Unit/Soil/Grain_size", makeVocab("Grain size"));
    populateDropDown("Unit/Soil/Consistency", makeVocab("Consistency"));
    populateDropDown("Unit/Soil/Cementation", makeVocab("Cementation"));
    populateCheckBoxGroup("Unit/Soil/Inclusions", makeVocab("Inclusions"));
    populateCheckBoxGroup("Unit/Soil/Disturbance", makeVocab("Disturbance"));
    populateRadioGroup("Unit/Soil/Artefacts", makeVocab("Artefacts"));
    populateDropDown("Unit/Grass_Roots/Root_Size", makeVocab("Root Size"));
    populateDropDown("Unit/Grass_Roots/Root_Abundance", makeVocab("Root Abundance"));
}

autoNumUnit() {
    next_unit_id = fetchOne("select value from localSettings where key = 'Unit';").get(0);
    setFieldValue("Unit/Soil/Unit_ID", next_unit_id); 
}

showGrassRootsTab(Boolean onLoad) {
    for(vocabid : getFieldValue("Unit/Soil/Inclusions")) {
        if(getVocabName(vocabid.getName()).equals("{bGrass_roots}")) {
            showTab("Unit/Grass_Roots");
            return;
        }
    }
    if(!onLoad) {
        showToast("Grass Roots was not selected in Inclusions");
    } else {
        showTab("Unit/Grass_Roots");
        cancelTab("Unit/Grass_Roots", false);
    }
    return;
}

/*** ARCHENT: Unit ***/
onEvent("Spit/Spit_Info/Update_And_New", "delayclick", "saveSpit(\"newSpit()\")");
onEvent("Spit/Spit_Info/Update_And_Close", "delayclick", "saveSpit(\"cancelTabGroup(\\\"Spit\\\", false);showTab(\\\"Trench/Spits\\\")\")");
onEvent("Spit/Spit_Info/Delete", "delayclick", "deleteSpit()");

String spit_id = null;

newSpit() {
    spit_id = null;
    newTabGroup("Spit");
    autoNumSpit();
    setFieldValue("Spit/Spit_Info/Job_Name", getFieldValue("Trench/Trench_Info/Job_Name"));
    setFieldValue("Spit/Spit_Info/Trench_ID", getFieldValue("Trench/Trench_Info/Trench_ID"));
    setFieldValue("Spit/Spit_Info/Author", username);
}

loadSpit() {
    spit_id = getListItemValue();
    loadSpitFrom(spit_id);
}

loadSpitFrom(archentid) {
    spit_id = archentid;
    if (isNull(spit_id)) {
        showToast("No Spit selected");
        return;
    }
    showTabGroup("Spit", spit_id);
}

saveSpit(String callback) {
    if (isNull(getFieldValue("Spit/Spit_Info/Spit_ID"))) {
        showWarning("Validation Error", "Cannot save Spit without ID");
        return;
    }
    
    if (!isNull(spit_id)) {
        entity = fetchArchEnt(spit_id);
    } else {
        next_spit_id = fetchOne("select value from localSettings where key = 'Spit';").get(0);
        if(Integer.parseInt(getFieldValue("Spit/Spit_Info/Spit_ID")) >= Integer.parseInt(next_spit_id)) {
            fetchOne("REPLACE INTO localSettings(key, value) VALUES('Spit', "+ getFieldValue("Spit/Spit_Info/Spit_ID") +"+1);");
        } else {
            fetchOne("REPLACE INTO localSettings(key, value) VALUES('Spit', "+ next_spit_id +");");
        }
    }
    saveTabGroup("Spit", spit_id, null, null, "spit_id = getLastSavedRecordId(); saveEntitiesToRel(\"TrenchSpit\", trench_id, spit_id);" + callback);
}

deleteSpit() {
    if (!isNull(spit_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Spit!", "reallyDeleteSpit()", "doNotDelete()");
    } else {
        cancelTabGroup("Spit", true);
        showTab("Trench/Spit");   
    }
}

reallyDeleteSpit() {
    deleteArchEnt(spit_id);
    cancelTabGroup("Spit", false);
    showTab("Trench/Spit");
}

autoNumSpit() {
    next_spit_id = fetchOne("select value from localSettings where key = 'Spit';").get(0);
    setFieldValue("Spit/Spit_Info/Spit_ID", next_spit_id); 
}

/*** Photolog Stuff ***/
onEvent("Photograph_log/Photograph_log/New", "delayclick", "savePhotolog(\"newPhotolog();\")");
onEvent("Photograph_log/Photograph_log/Close", "delayclick", "savePhotolog(\"closePhotoLog();\")");
onEvent("Photograph_log/Photograph_log/Delete", "delayclick", "deletePhotolog()");

String photolog_id;

newPhotolog(){
    photolog_id = null;
    newTabGroup("Photograph_log");
    date = fetchOne("select datetime('now', 'localtime');");
    setFieldValue("Photograph_log/Photograph_log/Creation_Date", date.get(0));
    setFieldValue("Photograph_log/Photograph_log/Created_By", username);
    setFieldValue("Photograph_log/Photograph_log/Trench_ID", getFieldValue("Trench/Trench_Info/Trench_ID"));
    setFieldValue("Photograph_log/Photograph_log/Job_Name", getFieldValue("Trench/Trench_Info/Job_Name"));

    //setFieldValue("Photograph_log/Photograph_log/Photograph_reference_ID", getCounter("Photograph log"));
}

loadPhotolog() {
    archent_id = getListItemValue();
    loadPhotologFrom(archent_id);
}

loadPhotologFrom(archent_id) {
    photolog_id = archent_id;
    if (isNull(photolog_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Photograph_log", photolog_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+photolog_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Photograph_log/Photograph_log/Created_By", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+photolog_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Photograph_log/Photograph_log/Creation_Date", bar.get(1));
}

savePhotolog(String callback) {
    if (isNull(getFieldValue("Photograph_log/Photograph_log/Photograph_reference_ID"))) {
        showWarning("Validation Error", "Cannot save Photo log without Photograph Reference ID");
        return;
    }
    if (!isNull(photolog_id)) {
        entity = fetchArchEnt(photolog_id);
    }
    if(!isNull(trench_id)) {
        saveTabGroup("Photograph_log", photolog_id, null, null, "photolog_id = getLastSavedRecordId();saveEntitiesToRel(\"TrenchPhotographLog\", trench_id, photolog_id);" + callback);    
    } else {
        saveTabGroup("Photograph_log", photolog_id, null, null, "photolog_id = getLastSavedRecordId();" + callback);
    }
    
}

closePhotoLog() {
    cancelTabGroup("Photograph_log", false);
}

deletePhotolog(){
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photolog Record!", "reallyDeletePhotolog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_log", true);
    }
}

reallyDeletePhotolog(){
    deleteArchEnt(photolog_id);
    cancelTabGroup("Photograph_log", false);
}

/*** Note Stuff ***/
onEvent("Notes/Notes/New", "delayclick", "saveNote(\"newNote();\")");
onEvent("Notes/Notes/Close", "delayclick", "saveNote(\"closeNote();\")");
onEvent("Notes/Notes/Delete", "delayclick", "deleteNote()");

String note_id;

newNote(){
    note_id = null;
    newTabGroup("Notes");
    date = fetchOne("select datetime('now', 'localtime');");
    setFieldValue("Notes/Notes/Creation_Date", date.get(0));
    setFieldValue("Notes/Notes/Created_By", username);
    setFieldValue("Notes/Notes/Trench_ID", getFieldValue("Trench/Trench_Info/Trench_ID"));
    setFieldValue("Notes/Notes/Job_Name", getFieldValue("Trench/Trench_Info/Job_Name"));
}

loadNote() {
    archent_id = getListItemValue();
    loadNoteFrom(archent_id);
}

loadNoteFrom(archent_id) {
    note_id = archent_id;
    if (isNull(note_id)) {
        showToast("No record selected");
        return;
    }
    
    showTabGroup("Notes", note_id);
}

saveNote(String callback) {
    if (isNull(getFieldValue("Notes/Notes/Note_Label"))) {
        showWarning("Validation Error", "Cannot save Note without Note Label");
        return;
    }
    if (!isNull(note_id)) {
        entity = fetchArchEnt(note_id);
    }
    if(!isNull(trench_id)) {
        saveTabGroup("Notes", note_id, null, null, "note_id = getLastSavedRecordId();saveEntitiesToRel(\"TrenchNote\", trench_id, note_id);" + callback);    
    } else {
        saveTabGroup("Notes", note_id, null, null, "note_id = getLastSavedRecordId();" + callback);
    }
    
}

closeNote() {
    cancelTabGroup("Notes", false);
    showTab("Trench/Notes");
}

deleteNote(){
    if (!isNull(note_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Note Record!", "reallyDeleteNote()", "doNotDelete()");
    } else {
        cancelTabGroup("Notes", true);
    }
}

reallyDeleteNote(){
    deleteArchEnt(note_id);
    cancelTabGroup("Notes", false);
    showTab("Trench/Notes");
}

/*** MISC ***/

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, e1verb);
    addReln(entity2, rel_id, e2verb);
}

makeVocab(String attrib) {
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

getVocabName(String vocabid) {
    Object a = fetchOne("select vocabName from vocabulary where vocabid = '"+ vocabid +"';");
    return a.get(0);
}

makePictureGallery(String attrib) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

doNotDelete() {
    showToast("Delete Cancelled.");
}

fillInGPS(String path) {
    Object position = getGPSPosition();    
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ){
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        Double northing = projPosition.getLatitude();
        Double easting = projPosition.getLongitude();
        setFieldValue(path+"Latitude", latitude);
        setFieldValue(path+"Longitude", longitude);
        setFieldValue(path+"Northing", northing);
        setFieldValue(path+"Easting", easting);
    } else {
        showToast("GPS Not initialized");
    }
}

/*** Map stuff gone for now
//Map stuff
DATA_ENTRY_LAYER = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;

onEvent("Trench/Map/centre", "click", "centerOnCurrentPosition(\"control/Map/map\");"); 

initMap() {
    setMapZoom("Trench/Map/map", 15.0f);
    DATA_ENTRY_LAYER_ID = createCanvasLayer("Trench/Map/map", DATA_ENTRY_LAYER);
    //showBaseMap("control/Map/map", "Base Layer", "files/data/maps/BM1.tif");
}

initMap();
***/

//Checking they have the correct projection EPSG:28355: GDA94 / MGA zone 55

// checkProjection(){
//     if(!getModuleSrid().equals("28355")){
//         showWarning("Warning","It appears that you are using the wrong module projection. To correct this, do the following:\n1. Open the web app.\n2. Open this module.\n3. Click edit module.\n4. Change the value in the \"Module SRID:\" to 28355: GDA94 / MGA zone 55.");
//     }
// }

// checkProjection();

/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname ||' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login() {
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
    setFieldValue("control/Performance/Number_of_Jobs", "1");
    setFieldValue("control/Performance/Average_Number_of_Trenches", "10");
    setFieldValue("control/Performance/Average_Number_of_Units", "10");
}

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

onEvent("control/Control/startsync", "click", "startSync()");
onEvent("control/Control/stopsync", "click", "stopSync()");
onEvent("control/Control/connectExternalGPS", "click", "startExternalGPS()");
onEvent("control/Control/connectInternalGPS", "click", "startInternalGPS()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadTrenchAttributes();
loadUnitAttributes();

onEvent("control/Performance/Generate_Performance_Data", "delayclick", "generatePerformanceData()");

generatePerformanceData() {
    number_of_jobs = Integer.parseInt(getFieldValue("control/Performance/Number_of_Jobs"));
    number_of_trenches = Integer.parseInt(getFieldValue("control/Performance/Average_Number_of_Trenches"));
    number_of_units = Integer.parseInt(getFieldValue("control/Performance/Average_Number_of_Units"));
    print(username);
    for(int i = 1; i <= number_of_jobs; ++i) {
        for(int j = 1; j <= number_of_trenches; ++j) {
            List trench_attributes = createAttributeList();
            // freetext, vocab, measure
            trench_attributes.add(createEntityAttribute("Job Name", "Job " + i, null, null, null));
            trench_attributes.add(createEntityAttribute("Trench ID", "" + j, null, null, null));
            trench_attributes.add(createEntityAttribute("Samples Details", getRandomFreetext(), null, null, null));
            trench_attributes.add(createEntityAttribute("Samples Collected", null, null, null, null));
            trench_attributes.add(createEntityAttribute("Distance to Water", getRandomFreetext(), null, null, null));
            trench_attributes.add(createEntityAttribute("Aspect", getRandomFreetext(), null, null, null));
            trench_attributes.add(createEntityAttribute("Geomorphic Context", null, getRandomVocab("Geomorphic Context"), null, null));
            trench_attributes.add(createEntityAttribute("Slope Detail 2", null, getRandomVocab("Slope Detail 2"), null, null));
            trench_attributes.add(createEntityAttribute("Slope Detail", null, getRandomVocab("Slope Detail"), null, null));
            trench_attributes.add(createEntityAttribute("Slope Degree", getRandomFreetext(), null, null, null));
            trench_attributes.add(createEntityAttribute("Dimensions", null, getRandomVocab("Dimensions"), null, null));
            trench_attributes.add(createEntityAttribute("Easting", null, null, getRandomMeasure(), null));
            trench_attributes.add(createEntityAttribute("Northing", null, null, getRandomMeasure(), null));
            trench_attributes.add(createEntityAttribute("Longitude", null, null, getRandomMeasure(), null));
            trench_attributes.add(createEntityAttribute("Latitude", null, null, getRandomMeasure(), null));
            trench_attributes.add(createEntityAttribute("T Author", username, null, null, null));
            trench_attributes.add(createEntityAttribute("Artefacts Present", null, getRandomVocab("Artefacts Present"), null, null));
            trench_attributes.add(createEntityAttribute("Landform Genesis", null, getRandomVocab("Landform Genesis"), null, null));
            trench_attributes.add(createEntityAttribute("Landform Element", null, getRandomVocab("Landform Element"), null, null));
            trench_attributes.add(createEntityAttribute("Sketches", stripAttachedFilePath(attachFile("storage/sdcard0/Download/berlandv3.cpp", true)), null, null, null));
            trench_attributes.add(createEntityAttribute("Photos", stripAttachedFilePath(attachFile("/storage/sdcard0/DCIM/image-1407731438776.jpg", true)), null, null, null));
            trench_id = saveArchEnt(null, "Trench", null, trench_attributes);
            for(int k = 1; k <= number_of_units; ++k) {
                List unit_attributes = createAttributeList();
                unit_attributes.add(createEntityAttribute("Unit Job Name", "Job " + i, null, null, null));
                unit_attributes.add(createEntityAttribute("Unit Trench ID", "" + j, null, null, null));
                unit_attributes.add(createEntityAttribute("Unit ID", "" + k, null, null, null));
                unit_attributes.add(createEntityAttribute("Consistency", null, getRandomVocab("Consistency"), null, null));
                unit_attributes.add(createEntityAttribute("Cementation", null, getRandomVocab("Cementation"), null, null));
                unit_attributes.add(createEntityAttribute("Inclusions", null, getRandomVocab("Inclusions"), null, null));
                unit_attributes.add(createEntityAttribute("Grain size", null, getRandomVocab("Grain size"), null, null));
                unit_attributes.add(createEntityAttribute("Moisture", null, getRandomVocab("Moisture"), null, null));
                unit_attributes.add(createEntityAttribute("Texture", null, getRandomVocab("Texture"), null, null));
                unit_attributes.add(createEntityAttribute("Colour", getRandomFreetext(), null, null, null));
                unit_attributes.add(createEntityAttribute("pH", getRandomFreetext(), null, null, null));
                unit_attributes.add(createEntityAttribute("Depth", null, null, getRandomMeasure(), null));
                unit_attributes.add(createEntityAttribute("Horizon", getRandomFreetext(), null, null, null));
                unit_attributes.add(createEntityAttribute("Artefacts", null, getRandomVocab("Artefacts"), null, null));
                unit_attributes.add(createEntityAttribute("Notes", getRandomFreetext(), null, null, null));
                unit_attributes.add(createEntityAttribute("Unit Author", username, null, null, null));
                unit_attributes.add(createEntityAttribute("Disturbance", null, getRandomVocab("Disturbance"), null, null));
                unit_attributes.add(createEntityAttribute("Root Abundance", null, getRandomVocab("Root Abundance"), null, null));
                unit_attributes.add(createEntityAttribute("Root Size", null, getRandomVocab("Root Size"), null, null));
                unit_id = saveArchEnt(null, "Unit", null, unit_attributes);
                saveEntitiesToRel("TrenchUnit", trench_id, unit_id);
            }
        }
    }
}

// onEvent("control/Performance/Generate_Trenches", "delayclick", "generateTrenches()");
// onEvent("control/Performance/Generate_Units", "delayclick", "generateUnits()");

// generateTrenches() {
//     number_of_jobs = Integer.parseInt(getFieldValue("control/Performance/Number_of_Jobs"));
//     number_of_trenches = Integer.parseInt(getFieldValue("control/Performance/Average_Number_of_Trenches"));
//     curr_trench = 0;
//     max_trench = number_of_trenches*number_of_jobs;
//     print(max_trench);
//     for(curr_trench = 0; curr_trench < max_trench; curr_trench++) {
//         generateTrench();    
//     }
    
// }

// int curr_trench, max_trench, curr_unit, max_unit, number_of_jobs, number_of_trenches, number_of_units;
// generateTrench() {
//     if(curr_trench == max_trench) return;
//     setFieldValue("control/Excavation_Data/Job_Name", "Job " + ((curr_trench/number_of_trenches)+1));
//     newTrench();
//     setFieldValue("Trench/Trench_Info/Trench_ID", "" + ((curr_trench%number_of_trenches)+1));
//     curr_trench++;
//     setFieldValue("Trench/Trench_Info/Latitude", getRandomMeasure());
//     setFieldValue("Trench/Trench_Info/Longitude", getRandomMeasure());
//     setFieldValue("Trench/Trench_Info/Northing", getRandomMeasure());
//     setFieldValue("Trench/Trench_Info/Easting", getRandomMeasure());
//     setFieldValue("Trench/Trench_Info/Dimensions", getRandomVocab("Dimensions"));
//     setFieldValue("Trench/Trench_Info/Artefacts_Present", getRandomVocab("Artefacts Present"));
//     setFieldValue("Trench/Trench_Info/Landform_Genesis", getRandomVocab("Landform Genesis"));
//     setFieldValue("Trench/Trench_Info/Landform_Element", getRandomVocab("Landform Element"));
//     setFieldValue("Trench/Trench_Info/Geomorphic_Context", getRandomVocab("Geomorphic Context"));
//     setFieldValue("Trench/Trench_Info/Aspect", getRandomFreetext());
//     setFieldValue("Trench/Trench_Info/Distance_To_Water", getRandomFreetext());
//     setFieldValue("Trench/Trench_Info/Samples_Collected", getRandomVocab("Samples Collected"));
//     setFieldValue("Trench/Trench_Info/Samples_Details", getRandomFreetext());
//     setFieldValue("Trench/Slope/Slope_Degree", getRandomMeasure());
//     setFieldValue("Trench/Slope/Slope_Detail", getRandomVocab("Slope Detail"));
//     setFieldValue("Trench/Slope/Slope_Detail_2", getRandomVocab("Slope Detail 2"));
//     addFile("Trench/Trench_Info/Sketches", "/storage/sdcard0/Download/berlandv3.cpp");
//     addPicture("Trench/Trench_Info/Photos", "/storage/sdcard0/DCIM/image-1407731438776.jpg");
//     saveTrench("cancelTabGroup(\"Trench\", false);");
// }

// ArrayList trenchlist;
// generateUnits() {
//     trenchlist = fetchEntityList("Trench");
//     number_of_units = Integer.parseInt(getFieldValue("control/Performance/Average_Number_of_Units"));
//     curr_unit = 0;
//     max_unit = Integer.parseInt(getFieldValue("control/Performance/Average_Number_of_Units"))*trenchlist.size();
//     generateUnit();
// }


// generateUnit() {
//     print(curr_unit);
//     if(curr_unit == max_unit) return;
//     if(curr_unit%number_of_units == 0) {
//         loadTrenchFrom(trenchlist.get(curr_unit/number_of_units).get(0));
//         print(trenchlist.get(curr_unit/number_of_units).get(0));
//     }
//     newUnit();
//     curr_unit++;
//     setFieldValue("Unit/Soil/Horizon", getRandomFreetext());
//     setFieldValue("Unit/Soil/Depth", getRandomMeasure());
//     setFieldValue("Unit/Soil/pH", getRandomFreetext());
//     setFieldValue("Unit/Soil/Colour", getRandomFreetext());
//     setFieldValue("Unit/Soil/Texture", getRandomVocab("Texture"));
//     setFieldValue("Unit/Soil/Moisture", getRandomVocab("Moisture"));
//     setFieldValue("Unit/Soil/Grain_size", getRandomVocab("Grain size"));
//     setFieldValue("Unit/Soil/Consistency", getRandomVocab("Consistency"));
//     setFieldValue("Unit/Soil/Cementation", getRandomVocab("Cementation"));
//     setFieldValue("Unit/Soil/Inclusions", getRandomVocab("Inclusions"));
//     setFieldValue("Unit/Soil/Disturbance", getRandomVocab("Disturbance"));
//     setFieldValue("Unit/Soil/Artefacts", getRandomVocab("Artefacts"));
//     setFieldValue("Unit/Soil/Notes", getRandomFreetext());
//     setFieldValue("Unit/Grass_Roots/Root_Size", getRandomVocab("Root Size"));
//     setFieldValue("Unit/Grass_Roots/Root_Abundance", getRandomVocab("Root Abundance"));
//     saveUnit("cancelTabGroup(\"Unit\", false); generateUnit();");
// }

String getRandomFreetext() {
    return fetchOne("select hex(randomblob(4)) || ' ' || hex(randomblob(4)) || ' ' || hex(randomblob(4)) || ' ' || hex(randomblob(4));").get(0);
}

String getRandomVocab(String vocabname) {
    return fetchOne("select vocabid, vocabname from vocabulary where attributeid in (select attributeid from attributekey where attributename = '" + vocabname + "' ) order by random() limit 1;").get(0);
}

String getRandomMeasure() {
    return fetchOne("select abs(random()) % 5000;").get(0);
}